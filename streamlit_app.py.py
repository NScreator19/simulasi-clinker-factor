# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LMpeSQX5MlHJ8AyJq_UbOIZdl1S7kslO
"""

import streamlit as st
import pandas as pd
import os

st.set_page_config(page_title="Simulasi Clinker Factor", layout="wide")

# --- Load and transform data from Excel ---
def load_data():
    file_path = "Clinker_Factor_2025.xlsx"
    if not os.path.exists(file_path):
        st.error(f"File '{file_path}' tidak ditemukan. Pastikan file sudah diunggah ke GitHub dan berada di direktori yang sama dengan app.py.")
        st.stop()

    df_raw = pd.read_excel(file_path, sheet_name="MTD")

    # Actual data
    df_actual = df_raw[[
        "Month", "Periode", "Cement Type", "Actual Clinker Consumption",
        "Actual Cement Production", "Actual CF"
    ]].copy()
    df_actual["Sumber"] = "Actual"
    df_actual = df_actual.rename(columns={
        "Actual Clinker Consumption": "Clinker Consumption",
        "Actual Cement Production": "Cement Production",
        "Actual CF": "Clinker Factor"
    })

    # Budget data
    df_budget = df_raw[[
        "Month", "Periode", "Cement Type", "Budget Clinker Consumption",
        "Budget Cement Production", "Budget CF"
    ]].copy()
    df_budget["Sumber"] = "Budget"
    df_budget = df_budget.rename(columns={
        "Budget Clinker Consumption": "Clinker Consumption",
        "Budget Cement Production": "Cement Production",
        "Budget CF": "Clinker Factor"
    })

    # Combine actual and budget
    df_final = pd.concat([df_actual, df_budget], ignore_index=True)
    return df_final

# --- Streamlit UI ---
st.title("Simulasi Clinker Factor (CF) Konsolidasi & Per Tipe Semen")

df_all = load_data()

# Filter Data
periode = st.selectbox("Pilih Periode", sorted(df_all["Periode"].dropna().unique()))
bulan = st.selectbox("Pilih Bulan", sorted(df_all["Month"].dropna().unique()))
sumber = st.radio("Pilih Sumber Data", ["Actual", "Budget"])

# Filter sesuai pilihan
df_filtered = df_all[(df_all["Periode"] == periode) &
                     (df_all["Month"] == bulan) &
                     (df_all["Sumber"] == sumber)].reset_index(drop=True)

total_clinker = df_filtered["Clinker Consumption"].sum()
total_cement = df_filtered["Cement Production"].sum()
cf_konsolidasi_awal = total_clinker / total_cement * 100 if total_cement > 0 else 0

st.write(f"**Clinker Factor Konsolidasi Awal: {cf_konsolidasi_awal:.2f}%**")

mode = st.radio("Pilih Mode Simulasi:", ["Ubah CF Konsolidasi", "Ubah CF per Tipe Semen"])

if mode == "Ubah CF Konsolidasi":
    target_cf = st.number_input("Masukkan target Clinker Factor Konsolidasi (%)", min_value=0.0, max_value=100.0, value=cf_konsolidasi_awal)
    semen_dipilih = st.multiselect("Pilih tipe semen yang akan disesuaikan Clinker Consumption-nya:", df_filtered["Cement Type"].tolist())

    if len(semen_dipilih) < 2:
        st.error("Pilih minimal 2 tipe semen untuk melakukan simulasi.")
    elif semen_dipilih:
        gap = (cf_konsolidasi_awal - target_cf) / 100 * total_cement
        clinker_baru_total = total_clinker - gap

        df_new = df_filtered.copy()
        total_prod_selected = df_filtered[df_filtered["Cement Type"].isin(semen_dipilih)]["Cement Production"].sum()

        for semen in semen_dipilih:
            idx = df_new[df_new["Cement Type"] == semen].index[0]
            prod = df_new.at[idx, "Cement Production"]
            clinker_new = clinker_baru_total * (prod / total_prod_selected)
            df_new.at[idx, "Clinker Consumption"] = clinker_new
            df_new.at[idx, "Clinker Factor"] = clinker_new / prod * 100

        cf_konsolidasi_baru = df_new["Clinker Consumption"].sum() / total_cement * 100

        st.subheader("\U0001F4CB Kondisi Sebelum")
        st.dataframe(df_filtered[df_filtered["Cement Type"].isin(semen_dipilih)])

        st.subheader("\U0001F4C8 Kondisi Setelah")
        st.dataframe(df_new[df_new["Cement Type"].isin(semen_dipilih)])

        st.write(f"**CF Konsolidasi Setelah Simulasi: {cf_konsolidasi_baru:.2f}%**")

elif mode == "Ubah CF per Tipe Semen":
    semen_dipilih = st.multiselect("Pilih tipe semen yang ingin diubah nilai Clinker Factor-nya:", df_filtered["Cement Type"].tolist())
    cf_baru_dict = {}
    if semen_dipilih:
        for semen in semen_dipilih:
            default_val = float(df_filtered[df_filtered["Cement Type"] == semen]["Clinker Factor"].values[0])
            cf_input = st.number_input(f"{semen} (CF Baru %):", min_value=0.0, max_value=100.0, value=round(default_val, 2))
            cf_baru_dict[semen] = cf_input

    if cf_baru_dict:
        df_result = df_filtered.copy()
        for semen, cf_new in cf_baru_dict.items():
            idx = df_result[df_result["Cement Type"] == semen].index[0]
            prod = df_result.at[idx, "Cement Production"]
            df_result.at[idx, "Clinker Factor"] = cf_new
            df_result.at[idx, "Clinker Consumption"] = prod * cf_new / 100

        cf_konsolidasi_baru = df_result["Clinker Consumption"].sum() / total_cement * 100

        st.subheader("\U0001F4CB Kondisi Sebelum")
        st.dataframe(df_filtered[df_filtered["Cement Type"].isin(semen_dipilih)])

        st.subheader("\U0001F4C8 Kondisi Setelah")
        st.dataframe(df_result[df_result["Cement Type"].isin(semen_dipilih)])

        st.write(f"**Clinker Factor Konsolidasi Setelah Simulasi: {cf_konsolidasi_baru:.2f}%**")